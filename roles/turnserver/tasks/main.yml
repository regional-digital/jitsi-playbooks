---
- include_role:
    name: acme.sh

- name: install coturn
  apt:
    name:
      - coturn

- name: create directory for certs
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: turnserver
    group: turnserver
    mode: '0755'
  with_items:
    - /etc/ssl/coturn/

- name: create certificate
  shell: /root/.acme.sh/acme.sh --issue --domain {{ fqdn }} --key-file /etc/ssl/coturn/{{ fqdn }}.key --fullchain-file /etc/ssl/coturn/{{ fqdn }}.pem --reloadcmd "systemctl restart coturn" --standalone --listen-v4 {{ acme_sh_additional_options | default('') }} --force
  args:
    warn: false
    creates: /etc/ssl/coturn/{{ fqdn }}.pem
  notify:
    - restart coturn

- name: chmod&chown /etc/ssl/coturn/{{ fqdn }}.key
  file:
    state: file
    path: /etc/ssl/coturn/{{ fqdn }}.key
    owner: turnserver
    group: turnserver
    mode: '0750'
  notify:
    - restart coturn

- name: chmod&chown /etc/ssl/coturn/{{ fqdn }}.pem
  file:
    state: file
    path: /etc/ssl/coturn/{{ fqdn }}.pem
    owner: root
    group: root
    mode: '0644'
  notify:
    - restart coturn

- name: generate /etc/turnserver.conf
  template:
    src: turnserver.conf.j2
    dest: /etc/turnserver.conf
    owner: root
    group: root
    mode: "0644"
    backup: yes
  notify:
    - restart coturn

- name: generate /etc/default/coturn
  template:
    src: coturn.j2
    dest: /etc/default/coturn
    owner: root
    group: root
    mode: "0644"
    backup: yes
  notify:
    - restart coturn

- name: generate /lib/systemd/system/coturn.service
  template:
    src: coturn.service.j2
    dest: /lib/systemd/system/coturn.service
    owner: root
    group: root
    mode: "0644"
    backup: yes
  notify:
    - reload coturn config
    - restart coturn
