- name: set instanceVars for {{ instance }}
  set_fact:
    instanceVars: '{{ instancevars[instance] }}'
  when: instancevars[instance] is defined

- name: Create wwwroot-directory for instances (empty to make nginx start) for {{ instance }}
  ansible.builtin.file:
    path: /var/www/jitsi-meet-{{ deployto | default(instance) }}
    state: directory
    owner: www-data
    group: www-data
    mode: '0775'

- name: check if ngingx-config exists in files/instances for {{ instance }}
  local_action: stat path="files/instances/{{ instance }}/etc/nginx.conf.j2"
  register: nginxconfigexists

- name: set domain names for ngingx-config for {{ instance }}
  set_fact:
    domainNames: '{{ instanceVars.domainNames }}'
  when: instanceVars.certbotDomainString is defined

- name: set domain names for ngingx-config for {{ instance }}
  set_fact:
    domainNames:
     - '{{ instance }}'
  when: instanceVars.certbotDomainString is not defined

- name: copy numbers file for {{ instance }}
  template:
    src: numbers.json.j2
    dest: /etc/jitsi/meet/numbers-{{ deployto | default(instance) }}.json
    owner: www-data
    group: www-data
    mode: '0775'
    backup: yes
  when: instanceVars.dialInNumbers is defined

- name: delete numbers file for {{ instance }}
  ansible.builtin.file:
    path: /etc/jitsi/meet/numbers-{{ deployto | default(instance) }}.json
    state: absent
  when: instanceVars.dialInNumbers is not defined

- name: copy nginx sites-available files for instances for {{ instance }}
  template:
    src: files/instances/{{ instance }}/etc/nginx.conf.j2
    dest: /etc/nginx/sites-available/{{ instance }}.conf
    owner: root
    group: adm
    mode: '0664'
    backup: yes
  when: nginxconfigexists.stat.exists == True
  notify:
    - reload nginx

- name: generate nginx-config from Template for {{ instance }}
  template:
    src: instancename.conf.j2
    dest: /etc/nginx/sites-available/{{ instance }}.conf
    owner: root
    group: adm
    mode: '0664'
    backup: yes
  when: nginxconfigexists.stat.exists == False
  notify:
    - reload nginx

- name: check if certificate of instance {{ instance }} exists in letsencrypt folder
  stat: 
    path: /etc/letsencrypt/live/{{ deployto | default(instance) }}/fullchain.pem
  register: letsencrypt_cert_exists

- name: check if certificate of instance {{ instance }} exists on ansible server
  local_action: stat path={{ filePathPrefix }}/certs/{{ deployto | default(instance) }}.fullchain.pem
  register: cert_exists_local
  when: letsencrypt_cert_exists.stat.exists == False

- name: create /etc/letsencrypt/live/{{ instance }}/
  file:
    state: directory
    dest: /etc/letsencrypt/live/{{ deployto | default(instance) }}/
    owner: root
    group: root
    mode: "0755"
  when: letsencrypt_cert_exists.stat.exists == False and cert_exists_local.stat.exists == True

- name: copy certificate of instance {{ instance }} from ansible host to server
  ansible.builtin.copy:
    src: "{{ filePathPrefix }}/certs/{{ deployto | default(instance) }}.fullchain.pem"
    dest: /etc/letsencrypt/live/{{ deployto | default(instance) }}/fullchain.pem
    owner: root
    group: root
    mode: '0644'
    backup: yes
  when: letsencrypt_cert_exists.stat.exists == False and cert_exists_local.stat.exists == True

- name: copy private key of instance {{ instance }} from ansible host to server
  ansible.builtin.copy:
    src: "{{ filePathPrefix }}/certs/{{ deployto | default(instance) }}.privkey.pem"
    dest: /etc/letsencrypt/live/{{ deployto | default(instance) }}/privkey.pem
    owner: root
    group: root
    mode: '0600'
    backup: yes
  when: letsencrypt_cert_exists.stat.exists == False and cert_exists_local.stat.exists == True

- name: Create letsencrypt certificate for {{ instance }}
  shell: certbot certonly -n --webroot -w /var/www/letsencrypt -m {{ letsencrypt_email }} --agree-tos -d {{ deployto | default(instance) }}
  args:
    creates: /etc/letsencrypt/live/{{ deployto | default(instance) }}
  when: letsencrypt_cert_exists.stat.exists == False and cert_exists_local.stat.exists == False and instancevars[instance].certbotDomainString is not defined

- name: Create letsencrypt certificate for {{ instance }} with multiple domains
  shell: certbot certonly -n --webroot -w /var/www/letsencrypt -m {{ letsencrypt_email }} --agree-tos -d {{ instancevars[instance].certbotDomainString }}
  args:
    creates: /etc/letsencrypt/live/{{ deployto | default(instance) }}
  when: letsencrypt_cert_exists.stat.exists == False and cert_exists_local.stat.exists == False and instancevars[instance].certbotDomainString is defined

- name: activate nginx vhosts for {{ instance }}
  ansible.builtin.file:
    src: /etc/nginx/sites-available/{{ instance }}.conf
    dest: /etc/nginx/sites-enabled/{{ instance }}.conf
    owner: root
    group: adm
    mode: '0664'
    state: link
  notify:
    - reload nginx

- name: check if the inscance {{ instance }} has an own meet-configfile
  local_action: stat path=files/instances/{{ instance }}/etc/meet-config.js
  register: meetConfigCheck

- name: if yes copy meet-config file for {{ instance }}
  ansible.builtin.copy:
    src: files/instances/{{ instance }}/etc/meet-config.js
    dest: /etc/jitsi/meet/{{ deployto | default(instance) }}-config.js
    owner: www-data
    group: www-data
    mode: '0775'
    backup: yes
  when: meetConfigCheck.stat.exists == True

- name: set usedWebVersion to match path
  set_fact:
    usedWebVersion: "-{{ instanceVars.usedWebVersion }}"
  when: instanceVars.usedWebVersion is defined

- name: set usedWebVersion to match path
  set_fact:
    usedWebVersion: ""
  when: instanceVars.usedWebVersion is not defined

- name: if not generate meet-config file for instance {{ instance }} from template
  template:
    src: meet-config{{ usedWebVersion }}.js.j2
    dest: /etc/jitsi/meet/{{ deployto | default(instance) }}-config.js
    owner: www-data
    group: www-data
    mode: '0775'
    backup: yes
  when: meetConfigCheck.stat.exists == False