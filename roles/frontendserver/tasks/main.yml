---
- name: Install prosody repository signing key
  apt_key:
    url: https://prosody.im/files/prosody-debian-packages.key
    state: present

- name: install stuff
  apt:
    name:
      - nginx
      - libpcre3
      - zlib1g
      - lua-sec
      - lua-event
      - default-jre-headless
      - python3-pexpect
      - liblua5.2-dev

- name: Copy Jitsi Packages to host
  ansible.builtin.copy:
    src: files/{{ item }}
    dest: "/opt/ansiblepackages/{{ item }}"
    owner: root
    group: root
    mode: '0600'
    backup: yes
  with_items:
    - jicofo_1.0-813-1_all.deb
    - jitsi-meet-prosody_1.0.5415-1_all.deb
    - jitsi-meet-tokens_1.0.5415-1_all.deb
    - jitsi-meet-web_1.0.5415-1_all.deb
    - jitsi-meet-web-config_1.0.5415-1_all.deb

- name: Copy Prosody Package to Ubuntu-host
  ansible.builtin.copy:
    src: files/{{ item }}
    dest: "/opt/ansiblepackages/{{ item }}"
    owner: root
    group: root
    mode: '0600'
    backup: yes
  with_items:
    - prosody_0.11.10-1~focal1_amd64.deb
  when: "ansible_distribution == 'Ubuntu'"

- name: Copy Prosody Package to Debian-host
  ansible.builtin.copy:
    src: files/{{ item }}
    dest: "/opt/ansiblepackages/{{ item }}"
    owner: root
    group: root
    mode: '0600'
    backup: yes
  with_items:
    - prosody_0.11.10-1~bullseye1_amd64.deb
  when: "ansible_distribution == 'Debian'"

#first care about nginx
- name: /etc/nginx/nginx.conf
  template:
    src: nginx/etc/nginx/nginx.conf.j2
    dest: /etc/nginx/nginx.conf
    owner: root
    group: adm
    mode: "0770"
    backup: yes
  notify:
    - reload nginx

- name: disable default nginx config
  file:
    name: /etc/nginx/sites-enabled/default
    state: absent

- name: remove default nginx config
  file:
    name: /etc/nginx/sites-available/default
    state: absent

- name: Remove default nginx wwwroot
  file:
    name: /var/www/html
    state: absent

- name: create directory for acme-stuff /var/www/acme
  ansible.builtin.file:
    path: /var/www/acme
    state: directory
    owner: www-data
    group: www-data
    mode: '0755'

- name: generate /etc/nginx/sites-available/default-site.conf
  template:
    src: nginx/etc/nginx/sites-available/default-site.conf.j2
    dest: /etc/nginx/sites-available/default-site.conf
    owner: root
    group: root
    mode: "0644"
    backup: yes
  notify:
    - reload nginx

- name: activate default-site (needed for getting letsencrypt-certs before able to activate instance-site-config)
  ansible.builtin.file:
    src: /etc/nginx/sites-available/default-site.conf
    dest: /etc/nginx/sites-enabled/default-site.conf
    state: link
  notify:
    - reload nginx

- name: check if certificate of signaling server exists in letsencrypt folder
  stat: 
    path: /etc/ssl/certs/{{ fqdn }}.pem
  register: cert_exists

- name: check if certificate of signaling server exists on ansible server
  local_action: stat path={{ filePathPrefix }}/certs/{{ fqdn }}.pem
  register: cert_exists_local
  when: cert_exists.stat.exists == False

- name: copy certificate from ansible host to server
  ansible.builtin.copy:
    src: "{{ filePathPrefix }}/certs/{{ fqdn }}.pem"
    dest: /etc/ssl/certs/{{ fqdn }}.pem
    owner: root
    group: root
    mode: '0644'
    backup: yes
  when: cert_exists.stat.exists == False and cert_exists_local.stat.exists == True

- name: check if private key of signaling server exists in letsencrypt folder
  stat: 
    path: /etc/ssl/private/{{ fqdn }}.key
  register: privkey_exists

- name: check if private key of signaling server exists on ansible server
  local_action: stat path={{ filePathPrefix }}/certs/{{ fqdn }}.key
  register: privkey_exists_local
  when: privkey_exists.stat.exists == False

- name: copy private key from ansible host to server
  ansible.builtin.copy:
    src: "{{ filePathPrefix }}/certs/{{ fqdn }}.key"
    dest: /etc/ssl/private/{{ fqdn }}.key
    owner: root
    group: root
    mode: '0600'
    backup: yes
  when: privkey_exists.stat.exists == False and privkey_exists_local.stat.exists == True

- name: Flush handlers
  meta: flush_handlers

- name: Create certificate for signaling-server
  shell: /root/.acme.sh/acme.sh --issue -w /var/www/acme -d {{ fqdn }} --fullchain-file /etc/ssl/certs/{{ fqdn }}.pem --key-file /etc/ssl/private/{{ fqdn }}.key --reloadcmd "systemctl restart nginx" {{ acme_sh_additional_options | default('') }}
  args:
    creates: /etc/letsencrypt/live/{{ fqdn }}
  when: cert_exists.stat.exists == False and cert_exists_local.stat.exists == False

- name: recheck if certificate of signaling server exists in letsencrypt folder
  stat: 
    path: /etc/ssl/certs/{{ fqdn }}.pem
  register: cert_exists

- name: generate /etc/nginx/sites-available/default-site-ssl.conf
  template:
    src: nginx/etc/nginx/sites-available/default-site-ssl.conf.j2
    dest: /etc/nginx/sites-available/default-site-ssl.conf
    owner: root
    group: adm
    mode: "0664"
    backup: yes
  when: cert_exists.stat.exists == True
  notify:
    - reload nginx

- name: activate default-site-ssl (needed for getting letsencrypt-certs before able to activate instance-site-config)
  ansible.builtin.file:
    src: /etc/nginx/sites-available/default-site-ssl.conf
    dest: /etc/nginx/sites-enabled/default-site-ssl.conf
    owner: root
    group: adm
    mode: '0664'
    state: link
  notify:
    - reload nginx

- name: /etc/nginx/conf.d/prosody_upstream.conf
  template:
    src: nginx/etc/nginx/conf.d/prosody_upstream.conf.j2
    dest: /etc/nginx/conf.d/prosody_upstream.conf
    owner: root
    group: adm
    mode: "0770"
    backup: yes
  when: cluster_partner is defined
  notify:
    - reload nginx

- name: check if /var/log/nginx/vts.db exists
  stat: 
    path: /var/log/nginx/vts.db
  register: vts_db_exists 

- name: touch /var/log/nginx/vts.db
  ansible.builtin.file:
    path: /var/log/nginx/vts.db
    state: touch
  when: vts_db_exists.stat.exists == False

- name: chmod&chown /var/log/nginx/vts.db 
  ansible.builtin.file:
    path: /var/log/nginx/vts.db
    owner: www-data 
    group: adm
    state: file
    mode: '0644'
  when: vts_db_exists.stat.exists == True

- name: Create modules directory for dynamic nginx modules
  ansible.builtin.file:
    path: /etc/nginx/modules
    state: directory
    owner: root
    group: adm
    mode: '0644'

- name: copy nginx vhost traffic status module
  ansible.builtin.copy:
    src: files/ngx_http_vhost_traffic_status_module.so
    dest: /etc/nginx/modules/ngx_http_vhost_traffic_status_module.so
    owner: root
    group: adm
    mode: '0664'
    backup: yes
  notify:
    - reload nginx

- name: generate /etc/nginx/modules-available/vts.conf
  template:
    src: nginx/etc/nginx/modules-available/vts.conf.j2
    dest: /etc/nginx/modules-available/vts.conf
    owner: root
    group: adm
    mode: "0664"
    backup: yes
  notify:
    - reload nginx

- name: activate vts-module
  ansible.builtin.file:
    src: /etc/nginx/modules-available/vts.conf
    dest: /etc/nginx/modules-enabled/vts.conf
    state: link
  notify:
    - reload nginx

- name: generate /etc/nginx/sites-available/vts-module.conf
  template:
    src: nginx/etc/nginx/sites-available/vts-module.conf.j2
    dest: /etc/nginx/sites-available/vts-module.conf
    owner: root
    group: adm
    mode: "0664"
    backup: yes
  notify:
    - reload nginx

- name: activate vts-module-site
  ansible.builtin.file:
    src: /etc/nginx/sites-available/vts-module.conf
    dest: /etc/nginx/sites-enabled/vts-module.conf
    state: link
  notify:
    - reload nginx

- name: Flush handlers
  meta: flush_handlers

- name: Set debconf-answers for jitsi-meet
  debconf:
    name: "{{ item.name }}"
    question: "{{ item.question }}"
    value: "{{ item.value }}"
    vtype: "{{ item.vtype }}"
  loop:
    - { name: 'jitsi-meet-tokens', question: 'jitsi-meet-tokens/appsecret', value: '{{ app_secret }}', vtype: 'string' }
    - { name: 'jitsi-meet-prosody', question: 'jitsi-videobridge/jvbsecret', value: '{{ prosody_user_jvb_password }}', vtype: 'string' }
    - { name: 'jitsi-videobridge', question: 'jitsi-videobridge/jvbsecret', value: '{{ prosody_user_jvb_password }}', vtype: 'string' }
    - { name: 'jicofo', question: 'jitsi-videobridge/jvb-hostname', value: '{{ hostname }}', vtype: 'string' }
    - { name: 'jitsi-meet-prosody', question: 'jitsi-videobridge/jvb-hostname', value: '{{ hostname }}', vtype: 'string' }
    - { name: 'jitsi-meet-web-config', question: 'jitsi-videobridge/jvb-hostname', value: '{{ hostname }}', vtype: 'string' }
    - { name: 'jitsi-videobridge', question: 'jitsi-videobridge/jvb-hostname', value: '{{ hostname }}', vtype: 'string' }
    - { name: 'jitsi-meet-web-config', question: 'jitsi-meet/cert-path-crt', value: '', vtype: 'string' }
    - { name: 'jitsi-meet-prosody', question: 'jitsi-meet-prosody/turn-secret', value: 'turncredentials_secret', vtype: 'string' }
    - { name: 'jitsi-meet-prosody', question: 'jicofo/jicofo-authpassword', value: '{{ jicofo_auth_password }}', vtype: 'string' }
    - { name: 'jitsi-meet-web-config', question: 'jitsi-meet/jvb-hostname', value: '{{ hostname }}', vtype: 'string' }
    - { name: 'jitsi-meet-tokens', question: 'jitsi-meet-tokens/appid', value: '{{ app_id }}', vtype: 'string' }
    - { name: 'jitsi-meet-prosody', question: 'jicofo/jicofo-authuser', value: 'focus', vtype: 'string' }
    - { name: 'jitsi-meet-web-config', question: 'jitsi-meet/cert-path-key', value: '', vtype: 'string' }
    - { name: 'jitsi-meet-prosody', question: 'jitsi-meet-prosody/jvb-hostname', value: '{{ hostname }}', vtype: 'string' }
    - { name: 'jitsi-meet-tokens', question: 'jitsi-meet-prosody/prosody_config', value: '/etc/prosody/conf.avail/{{ hostname }}.cfg.lua', vtype: 'string' }
    - { name: 'jitsi-meet-web-config', question: 'jitsi-meet/cert-choice', value: "Generate a new self-signed certificate (You will later get a chance to obtain a Let's encrypt certificate)", vtype: 'select' }

- name: Install Jitsi Packages
  apt:
    deb: "/opt/ansiblepackages/{{ item }}"
  with_items:
    - jicofo_1.0-813-1_all.deb
    - jitsi-meet-prosody_1.0.5415-1_all.deb
    - jitsi-meet-tokens_1.0.5415-1_all.deb
    - jitsi-meet-web_1.0.5415-1_all.deb
    - jitsi-meet-web-config_1.0.5415-1_all.deb

- name: Install Prosody Package on Ubuntu
  apt:
    deb: "/opt/ansiblepackages/{{ item }}"
  with_items:
    - prosody_0.11.10-1~focal1_amd64.deb
  when: "ansible_distribution == 'Ubuntu'"

- name: Install Prosody Package on Debian
  apt:
    deb: "/opt/ansiblepackages/{{ item }}"
  with_items:
    - prosody_0.11.10-1~bullseye1_amd64.deb
  when: "ansible_distribution == 'Debian'"

- name: create /etc/systemd/system/prosody.service.d
  file:
    state: directory
    dest: /etc/systemd/system/prosody.service.d
    owner: root
    group: root
    mode: "0755"

- name: generate /etc/systemd/system/prosody.service.d/override.conf
  template:
    src: systemd/system/prosody.service.d/override.conf.j2
    dest: /etc/systemd/system/prosody.service.d/override.conf
    owner: root
    group: adm
    mode: "0664"
    backup: yes
  notify:
    - reload systemd
    - restart prosody

- name: generate /etc/prosody/conf.d/{{ shardName }}.cfg.lua
  template:
    src: prosody/etc/prosody/conf.d/prosodydomain.cfg.lua.j2
    dest: /etc/prosody/conf.d/{{ shardName }}.cfg.lua
    owner: root
    group: root
    mode: "0644"
    backup: yes
  notify:
    - restart prosody 

- name: generate /etc/prosody/prosody.cfg.lua
  template:
    src: prosody/etc/prosody/prosody.cfg.lua.j2
    dest: /etc/prosody/prosody.cfg.lua
    owner: root
    group: prosody
    mode: "0640"
    backup: yes
  notify:
    - restart prosody 

- name: generate prosody key for {{ item }}{{ shardName }}
  command: prosodyctl cert key {{ item }}{{ shardName }} 2048
  args:
    creates: /var/lib/prosody/{{ item }}{{ shardName }}.key
  with_items:
    - ['', 'auth.']
  notify:
    - restart prosody

- name: Flush handlers
  meta: flush_handlers

- name: generate prosody certs for {{ item }}{{ shardName }}
  expect:
    command: prosodyctl cert generate {{ item }}{{ shardName }}
    responses:
      (.*)exists, do you want to replace it(.*): "n"
      (.*)countryName(.*): ""
      (.*)localityName(.*): ""
      (.*)organizationName(.*): ""
      (.*)organizationalUnitName(.*): ""
      (.*)commonName(.*): ""
      (.*)emailAddress(.*): ""
  args: 
    creates: /var/lib/prosody/{{ item }}{{ shardName }}.crt
  with_items:
    - ['', 'auth.']
  notify:
    - restart prosody

- name: link prosodyfiles
  ansible.builtin.file:
    src: /var/lib/prosody/{{ item[0] }}{{ shardName }}.{{ item[1] }}
    dest: /etc/prosody/certs/{{ item[0] }}{{ shardName }}.{{ item[1] }}
    state: link
  with_nested:
    - ['', 'auth.']
    - ['crt', 'key']
  notify:
    - restart prosody

- name: create /var/lib/prosody/auth%2e{{ shardName }}
  file:
    state: directory
    dest: /var/lib/#prosody/auth%2e{{ shardName }}
    owner: prosody
    group: prosody
    mode: "0750"

- name: create /var/lib/prosody/auth%2e{{ shardName }}/accounts
  file:
    state: directory
    dest: /var/lib/prosody/auth%2e{{ shardName }}/accounts
    owner: prosody
    group: prosody
    mode: "0750"

- name: generate /var/lib/prosody/auth%2e{{ shardName }}/accounts/jvb.dat
  expect:
    command: prosodyctl adduser jvb@auth.{{ shardName }}
    responses:
      (.*)Enter new password(.*): "{{ prosody_user_jvb_password }}"
      (.*)Retype new password(.*): "{{ prosody_user_jvb_password }}"
  args:
    creates: /var/lib/prosody/auth%2e{{ shardName }}/accounts/jvb.dat
  notify:
    - restart prosody

- name: generate /var/lib/prosody/auth%2e{{ shardName }}/accounts/focus.dat
  expect:
    command: prosodyctl adduser focus@auth.{{ shardName }}
    responses:
      (.*)Enter new password(.*): "{{ prosody_user_focus_password }}"
      (.*)Retype new password(.*): "{{ prosody_user_focus_password }}"
  args:
    creates: /var/lib/prosody/auth%2e{{ shardName }}/accounts/jigasi.dat
  notify:
    - restart prosody

- name: generate /var/lib/prosody/auth%2e{{ shardName }}/accounts/jigasi.dat
  expect:
    command: prosodyctl adduser jigasi@auth.{{ shardName }}
    responses:
      (.*)Enter new password(.*): "{{ prosody_user_jigasi_password }}"
      (.*)Retype new password(.*): "{{ prosody_user_jigasi_password }}"
  args:
    creates: /var/lib/prosody/auth%2e{{ shardName }}/accounts/jigasi.dat
  when: prosody_user_jigasi_password is defined
  notify:
    - restart prosody

- name: generate /etc/jitsi/jicofo/config
  template:
    src: jicofo/config.j2
    dest: /etc/jitsi/jicofo/config
    owner: jicofo
    group: jitsi
    mode: "0644"
    backup: yes
  notify:
    - restart jicofo

- name: generate /var/lib/prosody/auth%2e{{ shardName }}/roster/focus.dat
  command: prosodyctl mod_roster_command subscribe focus.{{ shardName }} focus@auth.{{ shardName }}
  args:
    creates: /var/lib/prosody/auth%2e{{ shardName }}/roster/focus.dat

- name: generate /etc/jitsi/jicofo/jicofo.conf
  template:
    src: jicofo/jicofo.conf.j2
    dest: /etc/jitsi/jicofo/jicofo.conf
    owner: jicofo
    group: jitsi
    mode: "0644"
    backup: yes
  notify:
    - restart jicofo