- name: set instanceVars for {{ instance }}
  set_fact:
    instanceVars: '{{ instancevars[instance] }}'
  when: instancevars[instance] is defined

- name: Create wwwroot-directory for instances (empty to make nginx start) for {{ instance }}
  ansible.builtin.file:
    path: /var/www/jitsi-meet-{{ deployto | default(instance) }}
    state: directory
    owner: www-data
    group: www-data
    mode: '0775'

- name: set domain names for ngingx-config for {{ instance }}
  set_fact:
    domainNames: '{{ instanceVars.domainNames }}'
  when: instanceVars.certbotDomainString is defined

- name: set domain names for ngingx-config for {{ instance }}
  set_fact:
    domainNames:
     - '{{ instance }}'
  when: instanceVars.certbotDomainString is not defined

- name: copy numbers file for {{ instance }}
  template:
    src: numbers.json.j2
    dest: /etc/jitsi/meet/numbers-{{ deployto | default(instance) }}.json
    owner: www-data
    group: www-data
    mode: '0775'
    backup: yes
  when: instanceVars.dialInNumbers is defined

- name: delete numbers file for {{ instance }}
  ansible.builtin.file:
    path: /etc/jitsi/meet/numbers-{{ deployto | default(instance) }}.json
    state: absent
  when: instanceVars.dialInNumbers is not defined

- name: generate nginx-config from Template for {{ instance }}
  template:
    src: instancename.conf.j2
    dest: /etc/nginx/sites-available/{{ instance }}.conf
    owner: root
    group: adm
    mode: '0664'
    backup: yes
  notify:
    - reload nginx

- name: check if certificate of instance {{ instance }} exists on signaling server
  stat: 
    path: /etc/ssl/certs/{{ deployto | default(instance) }}.pem
  register: letsencrypt_cert_exists

- name: check if certificate of instance {{ instance }} exists on ansible server
  local_action: stat path={{ filePathPrefix }}/certs/{{ deployto | default(instance) }}.pem
  register: cert_exists_local
  when: letsencrypt_cert_exists.stat.exists == False

- name: copy certificate of instance {{ instance }} from ansible host to server
  ansible.builtin.copy:
    src: "{{ filePathPrefix }}/certs/{{ deployto | default(instance) }}.pem"
    dest: /etc/ssl/certs/{{ deployto | default(instance) }}.pem
    owner: root
    group: root
    mode: '0644'
    backup: yes
  when: letsencrypt_cert_exists.stat.exists == False and cert_exists_local.stat.exists == True

- name: check if private key of instance {{ instance }} exists on signaling server
  stat: 
    path: /etc/ssl/private/{{ deployto | default(instance) }}.key
  register: letsencrypt_key_exists

- name: check if private key of instance {{ instance }} exists on ansible server
  local_action: stat path={{ filePathPrefix }}/certs/{{ deployto | default(instance) }}.key
  register: cert_exists_local
  when: letsencrypt_key_exists.stat.exists == False

- name: copy private key of instance {{ instance }} from ansible host to server
  ansible.builtin.copy:
    src: "{{ filePathPrefix }}/certs/{{ deployto | default(instance) }}.key"
    dest: /etc/ssl/private/{{ deployto | default(instance) }}.key
    owner: root
    group: root
    mode: '0600'
    backup: yes
  when: letsencrypt_cert_exists.stat.exists == False and cert_exists_local.stat.exists == True

- name: Create letsencrypt certificate for {{ instance }}
  shell: /root/.acme.sh/acme.sh --issue -w /var/www/acme -d {{ deployto | default(instance) }} --fullchain-file /etc/ssl/certs/{{ instance }}.pem --key-file /etc/ssl/private/{{ instance }}.key --reloadcmd "systemctl restart nginx" {{ acme_sh_additional_options | default('') }}
  args:
    creates: /etc/ssl/certs/{{ deployto | default(instance) }}.pem
  when: letsencrypt_cert_exists.stat.exists == False and cert_exists_local.stat.exists == False and instancevars[instance].certbotDomainString is not defined

- name: Create letsencrypt certificate for {{ instance }} with multiple domains
  shell: /root/.acme.sh/acme.sh --issue -w /var/www/acme -d {{ deployto | default(instancevars[instance].certbotDomainString) }} --fullchain-file /etc/ssl/certs/{{ instance }}.pem --key-file /etc/ssl/private/{{ instance }}.key --reloadcmd "systemctl restart nginx" {{ acme_sh_additional_options | default('') }}
  args:
    creates: /etc/ssl/certs/{{ deployto | default(instance) }}.pem
  when: letsencrypt_cert_exists.stat.exists == False and cert_exists_local.stat.exists == False and instancevars[instance].certbotDomainString is defined

- name: activate nginx vhosts for {{ instance }}
  ansible.builtin.file:
    src: /etc/nginx/sites-available/{{ instance }}.conf
    dest: /etc/nginx/sites-enabled/{{ instance }}.conf
    owner: root
    group: adm
    mode: '0664'
    state: link
  notify:
    - reload nginx

- name: set usedWebVersion to match path
  set_fact:
    usedWebVersion: "-{{ instanceVars.usedWebVersion }}"
  when: instanceVars.usedWebVersion is defined

- name: set usedWebVersion to match path
  set_fact:
    usedWebVersion: "-{{ defaultWebVersion }}"
  when: instanceVars.usedWebVersion is not defined

- name: generate meet-config file for instance {{ instance }} from template
  template:
    src: meet-config{{ usedWebVersion }}.js.j2
    dest: /etc/jitsi/meet/{{ deployto | default(instance) }}-config.js
    owner: www-data
    group: www-data
    mode: '0775'
    backup: yes

- name: copy/update wwwroot-template for instance {{ instance }} from jitsi-meet{{ usedWebVersion}}
  ansible.builtin.copy:
    src: "files/jitsi-www/base/jitsi-meet{{ usedWebVersion}}/"
    dest: /var/www/jitsi-meet-{{ deployto | default(instance) }}
    local_follow: False
    owner: www-data
    group: www-data
    mode: '0755'
  when: redeploy is defined and usedWebVersion is defined

- name: copy wwwroot of instance {{ instance }}
  ansible.builtin.copy:
    src: files/jitsi-www/instances/{{ instance }}/wwwroot/
    dest: /var/www/jitsi-meet-{{ deployto | default(instance) }}
    local_follow: False
    owner: www-data
    group: www-data
    mode: '0755'

